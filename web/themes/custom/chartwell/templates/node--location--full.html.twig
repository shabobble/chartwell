{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

{% set state = content.field_state_code.0 %}
{% set state_id = content.field_state_code['#items'].0.target_id %}

{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if label and not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {# {% if display_submitted %}
    <footer class="node__meta">
      {{ author_picture }}
      <div{{ author_attributes.addClass('node__submitted') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %} #}

  <div{{ content_attributes.addClass('node__content') }}>
    <section class="location">
      <div class="container">
        <div class="location__grid">
          <div class="location__agency">
            <h1>{{ content.field_city.0 }}, {{ state }} Staffing Agency</h1>
            <h2> Contact our {{ content.field_city.0 }} Employment Agency Office</h2>
            <div class="location__details">
              <p>Email: <a href="mailto:{{ content.field_email.0 }}">{{ content.field_email.0 }}</a></p>
              <p>Local Phone: <span>{{ content.field_local_phone.0 }}</span></p>
              <p>Address: <span>{{ content.field_street_address.0 }}, {{ content.field_city.0 }}, {{ state }} {{ content.field_postal_code.0 }}</span></p>
              <p>Hours: <span>{{ content.field_hours.0 }}</span></p>
            </div>
            <div class="location__cta">
              <h3 class="u-margin-bottom-medium">To find out more about a specific job from our {{ content.field_city.0 }}, {{ state }} office you can view our {{ content.field_city.0 }}, {{ state }} Jobs staffing page.</h3>
              <div class="u-center-flex float-shadow--100">
                <a href="/jobs?state_id={{ state_id }}" class="button button--rounded button--filled">View {{content.field_city.0 }} Jobs</a>
              </div>
            </div>
            {{ content.field_google_map }}
          </div>
          <div class="location__sidebar">
            {% if state['#plain_text'] == 'CA' %}
              <div class="location__sidebar--recent-jobs">{{ drupal_block('views_block:recent_jobs-block_1') }}</div>
            {% elseif state['#plain_text'] == 'IL' %}
              <div class="location__sidebar--recent-jobs">{{ drupal_block('views_block:recent_jobs-block_2') }}</div>
            {% elseif state['#plain_text'] == 'NV' %}
               <div class="location__sidebar--recent-jobs">{{ drupal_block('views_block:recent_jobs-block_3') }}</div>
            {% elseif state['#plain_text'] == 'NY' %}
              <div class="location__sidebar--recent-jobs">{{ drupal_block('views_block:recent_jobs-block_4') }}</div>
            {% elseif state['#plain_text'] == 'NC' %}
              <div class="location__sidebar--recent-jobs">{{ drupal_block('views_block:recent_jobs-block_5') }}</div>
            {% elseif state['#plain_text'] == 'PA' %}
              <div class="location__sidebar--recent-jobs">{{ drupal_block('views_block:recent_jobs-block_6') }}</div>
            {% endif %}             
            <div class="location__sidebar--able">
              <div class="location__sidebar--card">
                <div class="card_icon">
                  <svg>
                    <use xlink:href="/themes/custom/chartwell/img/sprite.svg#icon-edit"></use>
                  </svg>
                </div>
                <h2>
                  Create a profile with us
                  <br>
                  <small>and we will keep you posted if there is a job match for you.</small>
                </h2>
                <div class="cta-container">
                  <button class="cta" id="ablepopup">Create your FREE account</button>
                </div>
                
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>

</article>
